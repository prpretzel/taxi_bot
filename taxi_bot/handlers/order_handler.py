from aiogram import types
from taxi_bot.handlers.base_handler import BaseHandler
from taxi_bot.database_handler import DataBase
from aiogram import Bot
from taxi_bot.load_config import Config
from taxi_bot.logger import Logger
from taxi_bot.buttons import keyboard_generator
from aiogram.types import ReplyKeyboardRemove
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import re 

class OrderForm(StatesGroup):
    order_id = State()
    location_from = State()
    location_to = State()
    price = State()
    previous_message = State()


class OrderBaseHandler(BaseHandler):

    def __init__(
            self, 
            db: DataBase, 
            bot: Bot, 
            config: Config, 
            kbs: dict,
            logger: Logger,
        ):
        super().__init__(db, bot, config, kbs, logger)
        

class NewOrder(OrderBaseHandler):

    async def __call__(self, callback_query: types.CallbackQuery, state:FSMContext) -> None: 
        if not await self.create_user(callback_query):
            await self.answer_callback_query(callback_query)
            return
        await OrderForm.order_id.set()
        passenger_id, message_id, order_id, optionals = self.message_data(callback_query)
        active_order = self._db.get_user_active_order(passenger_id)
        if active_order:
            order_id = active_order.order_id
            await self.show_order(active_order, passenger_id)
            text = f"–ú—ã –≤—Å–µ –µ—â–µ –∏—â–µ–º –í–∞–º –º–∞—à–∏–Ω—É...\n–í–æ–¥–∏—Ç–µ–ª–µ–π –Ω–∞ –ª–∏–Ω–∏–∏: {self._db.get_available_drivers_count()}"
            await self.send_message(passenger_id, order_id, text, 'passenger_cancel')
        else:
            order_id = self._db.create_order(passenger_id)
            await self.send_message(passenger_id, order_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ—Å—Ç–æ–º, –æ—Ç–∫—É–¥–∞ –í–∞—Å –Ω—É–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å", 'passenger_send_location', delete_old=True)
            message = await self.send_message(passenger_id, order_id, "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üß≠–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é'", 'passenger_cancel')
            await self.set_state(state, 'order_id', order_id)
            await self.set_state(state, 'previous_message', message)
        await self.answer_callback_query(callback_query)
        

class NewOrderFrom(OrderBaseHandler):

    async def __call__(self, message: types.Location, state:FSMContext) -> None: 
        order_id = await self.get_state(state, 'order_id')
        passenger_id, message_id, order_id, optionals = self.message_data(message, order_id)
        previous_message = await self.get_state(state, 'previous_message')
        await self.remove_reply_markup(previous_message, order_id)
        location_from = optionals['location'] if 'location' in optionals else optionals['text']
        if len(location_from) > 120:
            text = "–ö—Ä–∞—Ç–∫–æ—Å—Ç—å - —Å–µ—Å—Ç—Ä–∞ —Ç–∞–ª–∞–Ω—Ç–∞ üòâ"
            message = await self.send_message(passenger_id, order_id, text, 'passenger_cancel')
            return
        self._db.update_order_location_from(order_id, location_from)
        await self.set_state(state, 'location_from', location_from)
        await self.discard_reply_markup(passenger_id, order_id)
        text = "–ö—É–¥–∞ –í—ã —Ö–æ—Ç–∏—Ç–µ –µ—Ö–∞—Ç—å?"
        message = await self.send_message(passenger_id, order_id, text, 'passenger_cancel')
        await self.set_state(state, 'previous_message', message)
        await OrderForm.next()


class NewOrderToText(OrderBaseHandler):

    async def __call__(self, message: types.Message, state=FSMContext) -> None:
        order_id = await self.get_state(state, 'order_id')
        passenger_id, message_id, order_id, optionals = self.message_data(message, order_id)
        previous_message = await self.get_state(state, 'previous_message')
        await self.remove_reply_markup(previous_message, order_id)
        location_to = optionals['location'] if 'location' in optionals else optionals['text']
        if len(location_to) > 120:
            text = "–ö—Ä–∞—Ç–∫–æ—Å—Ç—å - —Å–µ—Å—Ç—Ä–∞ —Ç–∞–ª–∞–Ω—Ç–∞ üòâ"
            message = await self.send_message(passenger_id, order_id, text, 'passenger_cancel')
            return
        self._db.update_order_location_to(order_id, location_to)
        text = "–£–∫–∞–∂–∏—Ç–µ –í–∞—à—É —Ü–µ–Ω—É:"
        message = await self.send_message(passenger_id, order_id, text, 'passenger_cancel')
        await self.set_state(state, 'previous_message', message)
        await OrderForm.next()


class NewOrderPrice(OrderBaseHandler):

    async def __call__(self, message: types.Message, state=FSMContext) -> None:
        order_id = await self.get_state(state, 'order_id')
        passenger_id, message_id, order_id, optionals = self.message_data(message, order_id)
        previous_message = await self.get_state(state, 'previous_message')
        await self.remove_reply_markup(previous_message, order_id)
        price = optionals['text']
        if re.match('^\d{1,10}$', price):
            self._db.update_order_price(order_id, price)
            await state.finish()
            order = self._db.get_order_by_id(order_id)
            await self.show_order(order=order, chat_id=passenger_id, delete_old=True)
            for chat_id in self._db.get_drivers_id(100):
                await self.show_order(order=order, chat_id=chat_id, kb_name='driver_accept_refuse')
            await self.show_admin_order(order)
            text = f"–ò–¥–µ—Ç –ø–æ–∏—Å–∫ –º–∞—à–∏–Ω—ã...\n–í–æ–¥–∏—Ç–µ–ª–µ–π –Ω–∞ –ª–∏–Ω–∏–∏: {self._db.get_available_drivers_count()}"
            message = await self.send_message(passenger_id, order_id, text, 'passenger_cancel')
        else:
            text = "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏ –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä 250)"
            message = await self.send_message(passenger_id, order_id, text, 'passenger_cancel')
        await self.set_state(state, 'previous_message', message)


class DriverAccept(OrderBaseHandler):

    async def __call__(self, callback_query: types.CallbackQuery) -> None:
        if not await self.create_user(callback_query):
            return
        driver_id, message_id, order_id, optionals = self.message_data(callback_query)
        if not self._db.update_order_driver(order_id, driver_id):
            await self.send_message(driver_id, order_id, '–ó–∞–∫–∞–∑ –±—ã–ª –ø—Ä–∏–Ω—è—Ç –¥—Ä—É–≥–∏–º –≤–æ–¥–∏—Ç–µ–ª–µ–º')
            return
        driver = self._db.get_user_by_id(driver_id)
        driver_name = driver.first_name
        driver_car = driver.driver_car
        driver_phone_number = driver.phone_number
        order = self._db.get_order_by_id(order_id)
        passenger_id = order.passenger_id
        passenger_phone_number = self._db.get_user_by_id(passenger_id).phone_number
        self._db.update_driver_status(driver_id, 150)
        await self.show_order(order, passenger_id, delete_old=True)
        await self.show_order(order, driver_id)
        text = f"–í–∞—à –∑–∞–∫–∞–∑ #{order_id}\n–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏ —Å –ø–∞—Å—Å–∞–∂–∏—Ä–æ–º {passenger_phone_number}\n–ß–∞—Ç —Å –ø–∞—Å—Å–∞–∂–∏—Ä–æ–º: {self.tg_user_link(passenger_id, '–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç')}"
        await self.send_message(driver_id, order_id, text, 'driver_cancel_wait')
        text = f"–ú–∞—à–∏–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞. –í–∞—à –≤–æ–¥–∏—Ç–µ–ª—å, {driver_name}, –ø—Ä–∏–µ–¥–µ—Ç –Ω–∞ {driver_car}\n–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏ —Å –≤–æ–¥–∏—Ç–µ–ª–µ–º {driver_phone_number}"
        await self.send_message(passenger_id, order_id, text, 'passenger_cancel')
        await self.answer_callback_query(callback_query)


class DriverHide(OrderBaseHandler):

    async def __call__(self, callback_query: types.CallbackQuery) -> None:
        driver_id, message_id, order_id, optionals = self.message_data(callback_query)
        await self.delete_old_messages(message_id=message_id, force=True)
        await self.answer_callback_query(callback_query)


class DriverReturn(OrderBaseHandler):

    async def __call__(self, callback_query: types.CallbackQuery) -> None:
        driver_id, message_id, order_id, optionals = self.message_data(callback_query)
        order = self._db.update_order_driver_none(order_id, driver_id)
        passenger_id = order.passenger_id
        self._db.update_order(order_id, 100)
        self._db.update_driver_status(driver_id, 100)
        await self.show_order(order=order, chat_id=passenger_id, delete_old=True)
        text = f"–ú—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏—Å–∫–∞—Ç—å –í–∞–º –º–∞—à–∏–Ω—É"
        await self.send_message(passenger_id, order_id, text, 'passenger_cancel')
        for chat_id in self._db.get_drivers_id(100):
            await self.show_order(order=order, chat_id=chat_id, kb_name='driver_accept_refuse')
        await self.answer_callback_query(callback_query)


class DriverWait(OrderBaseHandler):

    async def __call__(self, callback_query: types.CallbackQuery) -> None:
        driver_id, message_id, order_id, optionals = self.message_data(callback_query)
        order = self._db.update_wait_dt(order_id)
        await self.edit_reply_markup(callback_query, 'driver_cancel_pick', order_id)
        await self.send_message(order.passenger_id, order_id, text=f"–í–æ–¥–∏—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç")
        await self.answer_callback_query(callback_query)


class DriverPick(OrderBaseHandler):

    async def __call__(self, callback_query: types.CallbackQuery) -> None:
        driver_id, message_id, order_id, optionals = self.message_data(callback_query)
        order = self._db.update_wait_dt(order_id)
        self._db.update_pick_dt(order_id)
        await self.send_message(order.passenger_id, order_id, text=f"–ù–∞—á–∞–ª–æ –ø–æ–µ–∑–¥–∫–∏")
        await self.edit_reply_markup(callback_query, 'driver_complete', order_id)
        await self.answer_callback_query(callback_query)


class DriverComplete(OrderBaseHandler):

    async def __call__(self, callback_query: types.CallbackQuery) -> None:
        driver_id, message_id, order_id, optionals = self.message_data(callback_query)
        order = self._db.get_order_by_id(order_id)
        self._db.update_end_dt(order_id)
        dt1 = order.order_dt
        dt2 = order.wait_dt
        dt3 = order.pick_dt
        dt4 = order.end_dt
        add_text = [
            "",
            f"–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Ç–∞–∫—Å–∏: {self.time_handler(dt2, dt1)}",
            f"–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–∞—Å—Å–∞–∂–∏—Ä–∞: {self.time_handler(dt3, dt2)}",
            f"–ü–æ–µ–∑–¥–∫–∞ –∑–∞–Ω—è–ª–∞: {self.time_handler(dt4, dt3)}",
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏: {order.price} —Ä—É–±–ª–µ–π",
        ]
        add_text = "\n".join(add_text)
        self._db.driver_complete_trip(driver_id, order.price)
        self._db.update_end_dt(order_id)
        await self.send_message(chat_id=order.passenger_id, order_id=order_id, text=f"–ü–æ–µ–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ {add_text}", kb_name='passenger_call_taxi', delete_old=True)
        await self.send_message(chat_id=driver_id, order_id=order_id, text=f"–ü–æ–µ–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–≤–æ–¥–∏—Ç–µ–ª—å){add_text}")
        await self.show_active_orders(driver_id)
        await self.answer_callback_query(callback_query)


class DriverCancel(OrderBaseHandler):

    async def __call__(self, callback_query: types.CallbackQuery) -> None:
        driver_id, message_id, order_id, optionals = self.message_data(callback_query)
        order = self._db.update_cancel_dt(order_id)
        self._db.update_order(order_id, order.order_status+7)
        passenger_id = order.passenger_id
        self._db.update_driver_status(driver_id, 100)
        await self.send_message(chat_id=passenger_id, order_id=order_id, text=f"–í–æ–¥–∏—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –ø–æ–µ–∑–¥–∫—É", kb_name='passenger_call_taxi', delete_old=True)
        await self.send_message(chat_id=driver_id, order_id=order_id, text=f"–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–µ–∑–¥–∫—É")
        await self.show_active_orders(driver_id)
        await self.answer_callback_query(callback_query)
        

class PassengerCancel(OrderBaseHandler):

    async def __call__(self, callback_query: types.CallbackQuery, state: FSMContext) -> None:
        passenger_id, message_id, order_id, optionals = self.message_data(callback_query)
        order = self._db.update_cancel_dt(order_id)
        self._db.update_order(order_id, order.order_status+3)
        driver_id = order.driver_id
        await self.send_message(chat_id=passenger_id, order_id=order_id, text=f"–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–µ–∑–¥–∫—É", kb_name='passenger_call_taxi', delete_old=True)
        if driver_id:
            await self.send_message(chat_id=driver_id, order_id=order_id, text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –ø–æ–µ–∑–¥–∫—É")
            self._db.update_driver_status(driver_id, 100)
            await self.show_active_orders(driver_id)
        if await state.get_state():
            await state.finish()
        await self.answer_callback_query(callback_query)
        